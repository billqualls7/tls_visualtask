// Generated by gencpp from file vt_msgs/Yoloutput.msg
// DO NOT EDIT!


#ifndef VT_MSGS_MESSAGE_YOLOUTPUT_H
#define VT_MSGS_MESSAGE_YOLOUTPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vt_msgs/Box.h>

namespace vt_msgs
{
template <class ContainerAllocator>
struct Yoloutput_
{
  typedef Yoloutput_<ContainerAllocator> Type;

  Yoloutput_()
    : classification()
    , score(0.0)
    , boxes()  {
    }
  Yoloutput_(const ContainerAllocator& _alloc)
    : classification(_alloc)
    , score(0.0)
    , boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _classification_type;
  _classification_type classification;

   typedef double _score_type;
  _score_type score;

   typedef  ::vt_msgs::Box_<ContainerAllocator>  _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::vt_msgs::Yoloutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vt_msgs::Yoloutput_<ContainerAllocator> const> ConstPtr;

}; // struct Yoloutput_

typedef ::vt_msgs::Yoloutput_<std::allocator<void> > Yoloutput;

typedef boost::shared_ptr< ::vt_msgs::Yoloutput > YoloutputPtr;
typedef boost::shared_ptr< ::vt_msgs::Yoloutput const> YoloutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vt_msgs::Yoloutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vt_msgs::Yoloutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vt_msgs::Yoloutput_<ContainerAllocator1> & lhs, const ::vt_msgs::Yoloutput_<ContainerAllocator2> & rhs)
{
  return lhs.classification == rhs.classification &&
    lhs.score == rhs.score &&
    lhs.boxes == rhs.boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vt_msgs::Yoloutput_<ContainerAllocator1> & lhs, const ::vt_msgs::Yoloutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vt_msgs::Yoloutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vt_msgs::Yoloutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vt_msgs::Yoloutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vt_msgs::Yoloutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vt_msgs::Yoloutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vt_msgs::Yoloutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vt_msgs::Yoloutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9855b3e6d4943fe13cec77d13b1c419b";
  }

  static const char* value(const ::vt_msgs::Yoloutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9855b3e6d4943fe1ULL;
  static const uint64_t static_value2 = 0x3cec77d13b1c419bULL;
};

template<class ContainerAllocator>
struct DataType< ::vt_msgs::Yoloutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vt_msgs/Yoloutput";
  }

  static const char* value(const ::vt_msgs::Yoloutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vt_msgs::Yoloutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string classification\n"
"float64 score\n"
"\n"
"Box boxes\n"
"================================================================================\n"
"MSG: vt_msgs/Box\n"
"float64 x1\n"
"float64 x2\n"
"float64 y1\n"
"float64 y2\n"
;
  }

  static const char* value(const ::vt_msgs::Yoloutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vt_msgs::Yoloutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classification);
      stream.next(m.score);
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Yoloutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vt_msgs::Yoloutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vt_msgs::Yoloutput_<ContainerAllocator>& v)
  {
    s << indent << "classification: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.classification);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "boxes: ";
    s << std::endl;
    Printer< ::vt_msgs::Box_<ContainerAllocator> >::stream(s, indent + "  ", v.boxes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VT_MSGS_MESSAGE_YOLOUTPUT_H
